# Default values for vmalert.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

vmalert: {}

replicaCount: 1

image:
  repository: "victoriametrics/vmalert"
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: "vmalert"
fullnameOverride: "vmalert"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: 
  logging: "PLAIN"
  prometheus.io/scrape: "true"
  prometheus.io/port: "8880"
  prometheus.io/path: "/metrics"

podSecurityContext: {}
  # fsGroup: 2000

securityContext: 
  capabilities:
    drop:
      - ALL
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 8880

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 15

livenessProbe:
  tcpSocket:
    port: http
  initialDelaySeconds: 5
  periodSeconds: 15
  timeoutSeconds: 5

resources: 
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

server:
  # vmalert reads metrics from source, next section represents its configuration. It can be any service which supports
  # MetricsQL or PromQL.
  datasource:
    url: "http://vmselect:8481/select/0/prometheus"
    # -- Basic auth for datasource
    basicAuth:
      username: ""
      password: ""
      # -- Auth based on Bearer token for datasource
    bearer:
      # -- Token with Bearer token. You can use one of token or tokenFile. You don't need to add "Bearer" prefix string
      token: ""
      # -- Token Auth file with Bearer token. You can use one of token or tokenFile
      tokenFile: ""

  remote:
    write:
      url: "http://vminsert:8480/insert/0/prometheus"
      # -- Basic auth for remote write
      basicAuth:
        username: ""
        password: ""
      # -- Auth based on Bearer token for remote write
      bearer:
        # -- Token with Bearer token. You can use one of token or tokenFile. You don't need to add "Bearer" prefix string
        token: ""
        # -- Token Auth file with Bearer token. You can use one of token or tokenFile
        tokenFile: ""
    read:
      url: ""
      # -- Basic auth for remote read
      basicAuth:
        username: ""
        password: ""
        # -- Auth based on Bearer token for remote read
      bearer:
        # -- Token with Bearer token. You can use one of token or tokenFile. You don't need to add "Bearer" prefix string
        token: ""
        # -- Token Auth file with Bearer token. You can use one of token or tokenFile
        tokenFile: ""

  notifier:
    alertmanager:
      url: "http://alertmanager:9093"

  # vmalert alert rules configuration configuration:
  # use existing configmap if specified
  # otherwise .config values will be used
  configMap: ""
  config:
    alerts:
      groups: []